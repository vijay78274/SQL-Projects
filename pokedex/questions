Q1. List all Pokémon names with an HP greater than 70.
select p.name, s.hp from pokemon p join stats s on p.id=s.id having hp > 70;

Q2. Show the names and types of Pokémon that are of type fire.
select p.name, t.value from pokemon p join type t on p.id = t.id having t.value='fire';

Q3. Find Pokémon with speed less than 50 and more than 60. What do you observe?
select p.name, s.speed from pokemon p join stats s on p.id=s.id having s.speed>50 and s.speed<60;

Q4. What is the average weight of all Pokémon?
select avg(weight) from pokemon; 

Q5. Find the maximum attack value for each evolution set
select p.evo_set, max(s.attack) from pokemon p join stats s on p.id=s.id group by evo_set;

Q6. Count how many Pokémon belong to each type
select value, count(value) from type group by value;

Q7. Which 5 Pokémon have the highest special attack (s_attack)?
select p.name, s.s_attack from pokemon p join stats s on p.id=s.id order by s.s_attack desc limit 5;

Q8. Find all Pokémon whose name starts with the letter 'c'.
select * from pokemon where name like 'c%';

Q9. Find Pokémon with the highest combined base stats (hp + attack + defense + s_attack + s_defense + speed).
select p.name, s.hp+s.attack+s.defense+s.s_attack+s.s_defense+s.speed as total_stats from pokemon p 
join stats s on p.id=s.id 
order by total_stats desc limit 1;

Q10. Show the name and BMI (body mass index = weight / (height^2)) of all Pokémon, ordered by BMI descending
select name, round(weight/pow(height,2),2) as BMI from pokemon;

Q11. List all Pokémon names along with their primary and secondary types
WITH typed_ranked AS (
    SELECT 
        t.id,
        t.value,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY t.value) AS rn
    FROM type t
)
SELECT p.name, max(case when rn=1 then t.value end) as primary_type,
max(case when rn=2 then t.value end) as secondary_type
from typed_ranked t left join pokemon p 
on p.id=t.id
group by p.name;

Q12. Find all Pokémon with both 'fire' and 'flying' types using a self-join on pokemon_type.
with pokemon_type as
(
	select t1.id from type t1 
    join type t2 on t1.id=t2.id
    where t1.value='fire' and t2.value='flying'
)
select p.name from pokemon p join pokemon_type t on t.id=p.id;

Q13. Retrieve the name, evolution stage, and total stats (sum of all stat columns) of each Pokémon
with evolution as 
(
	select p1.id, p1.name, row_number() over (partition by p1.evo_set) as evolution_stage 
    from pokemon p1 left join pokemon p2 
	on p1.evo_set=p2.id
)
select e.id, e.name, e.evolution_stage, s.hp+s.attack+s.defense+s.s_attack+s.s_defense+s.speed as total_stat from evolution e
join stats s on e.id=s.id;

Q14. List all Pokémon whose evolution set contains more than one Pokémon.
select evo_set, count(evo_set) as no_of_evol from pokemon p group by evo_set;

Q15. Display each Pokémon along with the names of other Pokémon in the same evolution set (excluding itself).
with evolution as 
(
	select p1.id, p1.name, p1.evo_set, row_number() over (partition by p1.evo_set) as evolution_stage 
    	from pokemon p1 left join pokemon p2 
	on p1.evo_set=p2.id
)
select max(case when e.evolution_stage = 1 then e.name end) as stage1,
max(case when e.evolution_stage = 2 then e.name end) as stage2,
max(case when e.evolution_stage = 3 then e.name end) as stage3
from evolution e group by e.evo_set;

Q16. For each evolution set, rank Pokémon by total base stats using RANK().
with total
as
(
	select id, hp+attack+defense as total_stat from stats
)
select  p.evo_set, p.name, rank() over (partition by p.evo_set order by t.total_stat desc) as ranks from pokemon p join total t on t.id=p.id;

Q17. Find Pokémon whose speed is above the average speed of their evolution set using AVG() OVER (PARTITION BY evo_set).
with average as
(
	select p.id, p.name, p.evo_set, avg(t.speed) over (partition by p.evo_set) as avg_num 
	from pokemon p left join stats t on t.id=p.id
)
select a.name, a.avg_num, s.speed from average a join stats s on a.id=s.id having s.speed>a.avg_num;

Q18. Calculate the cumulative sum of HP values ordered by Pokémon ID using SUM() OVER (ORDER BY id).
select p.name, sum(hp) over (order by s.id) as cumulative_sum from pokemon p join stats s on p.id=s.id;

Q19. List Pokémon along with the difference in attack from the previous Pokémon in the same evolution set using LAG().
with previous_pokemon 
as
(
	select s.id, p.name, lag(s.attack) over (partition by p.evo_set) as diff from pokemon p join stats s on p.id=s.id
)
select p.name, s.attack-p.diff from stats s join previous_pokemon p on p.id=s.id;

Q20. Use a CTE to calculate the total stats for each Pokémon, then select those whose total stats are in the top 10.
with total_stats
as
(
	select id, hp+attack+defense+s_attack+s_defense+speed as total from stats
)
select p.name, t.total from pokemon p join total_stats t on p.id=t.id order by t.total desc limit 10;

