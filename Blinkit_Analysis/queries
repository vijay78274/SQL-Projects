Q1. List all customers who registered in 2024.
    select *From blinkit_customers where year(registration_date)=2024;

Q2. Display all products with a margin percentage greater than 20%.
    select *From blinkit_products where margin_percentage>20;

Q3. Find the total number of feedback entries received in last year.
    select *from blinkit_customer_feedback where year(current_date())-year(feedback_date) = 1;

Q4. Get all orders where delivery status is 'Delayed'.
    select *From blinkit_orders where delivery_status like '%Delayed%';

Q5. Show all campaigns that used the ‘Email’ channel.
    select *from blinkit_marketing_performance where channel='Email';

Q6. Show the average rating for each feedback_category.
    Show the average rating for each feedback_category.
    select feedback_category, avg(rating) 
    from
    blinkit_customer_feedback     
    group by feedback_category;

Q7. List all orders with their customer name and total order value.
    select c.customer_name, sum(o.order_total) as total_order_value 
    from blinkit_orders o
    join blinkit_customers c on o.customer_id = c.customer_id
    group by c.customer_name;

Q8. For each product, show the total quantity sold.
    select p.product_name, sum(o.quantity) as total_sale 
    from 
    blinkit_products p join blinkit_order_items o
    on p.product_id = o.product_id 
    group by
    p.product_name;

Q9. Display all customers who gave negative sentiment feedback.
    select c.customer_name, f.sentiment 
    from
    blinkit_customers c join blinkit_customer_feedback f 
    on c.customer_id=f.customer_id where f.sentiment='Negative';

Q10. Show top 5 brands with the most products in the catalog.
    select *From blinkit_products;
    select brand, sum(max_stock_level) as catalog
    from blinkit_products
    group by brand 
    order by catalog desc
    limit 5;

Q11. Calculate the ROAS (Return on Ad Spend) per campaign.
    select *From blinkit_marketing_performance;
    select campaign_name,sum(roas) as roas_per_camp
    from 
    blinkit_marketing_performance 
    group by campaign_name;

Q12. Find the top 3 customer segments by total_orders.
    select customer_segment, sum(total_orders) as total
    from 
    blinkit_customers
    group by 
    customer_segment;

Q13. For each store, compute the total number of delayed deliveries.
     select *From blinkit_orders;
     select store_id, sum(case when delivery_status like '%Delayed' then 1 else 0 end) as status 
     from
     blinkit_orders group by store_id;

Q14. List customers whose average order value is above ₹500 and have more than 10 total orders.
     select customer_name, total_orders, avg_order_value 
     from blinkit_customers
     having avg_order_value>500 and total_orders>10;

Q15. Identify feedback that contains the word “bad” in feedback_text.
     select *From blinkit_customer_feedback
     where feedback_text like '%bad%';

Q16. Find the top 5 customers by total revenue generated from their orders.
     select customer_id, total_orders*avg_order_value as total_revenue 
     from blinkit_customers;

Q17. Compare promised vs. actual delivery time and list the orders delayed by more than 2 days.
     select order_id, actual_delivery_time, promised_delivery_time, 
     datediff(actual_delivery_time,promised_delivery_time) as time_diff
     from blinkit_orders 
     where time_diff > 2;

Q18. Show monthly revenue generated from campaigns in 2024.
     SELECT 
        MONTH(date), SUM(revenue_generated)
     FROM
        blinkit_marketing_performance
     WHERE
        YEAR(date) = '2024'
     GROUP BY MONTH(date);

Q19. Find the number of orders placed each day of the week.
     SELECT 
        WEEKDAY(order_date), COUNT(*)
     FROM
        blinkit_orders
    GROUP BY WEEKDAY(order_date);
